// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fit_aerwnnet
Rcpp::List fit_aerwnnet(arma::mat x, arma::mat y, Rcpp::NumericVector size, bool skip, bool flat, double eta);
RcppExport SEXP _rwnnet_fit_aerwnnet(SEXP xSEXP, SEXP ySEXP, SEXP sizeSEXP, SEXP skipSEXP, SEXP flatSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< bool >::type flat(flatSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_aerwnnet(x, y, size, skip, flat, eta));
    return rcpp_result_gen;
END_RCPP
}
// predict_aerwnnet
arma::mat predict_aerwnnet(Rcpp::List network, arma::mat x);
RcppExport SEXP _rwnnet_predict_aerwnnet(SEXP networkSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type network(networkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_aerwnnet(network, x));
    return rcpp_result_gen;
END_RCPP
}
// fit_drwnnet
Rcpp::List fit_drwnnet(arma::mat x, arma::mat y, Rcpp::NumericVector size, double eta);
RcppExport SEXP _rwnnet_fit_drwnnet(SEXP xSEXP, SEXP ySEXP, SEXP sizeSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_drwnnet(x, y, size, eta));
    return rcpp_result_gen;
END_RCPP
}
// predict_drwnnet
arma::mat predict_drwnnet(Rcpp::List network, arma::mat x);
RcppExport SEXP _rwnnet_predict_drwnnet(SEXP networkSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type network(networkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_drwnnet(network, x));
    return rcpp_result_gen;
END_RCPP
}
// fit_edaerwnnet
Rcpp::List fit_edaerwnnet(arma::mat x, arma::mat y, Rcpp::NumericVector size, bool skip, double eta);
RcppExport SEXP _rwnnet_fit_edaerwnnet(SEXP xSEXP, SEXP ySEXP, SEXP sizeSEXP, SEXP skipSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_edaerwnnet(x, y, size, skip, eta));
    return rcpp_result_gen;
END_RCPP
}
// predict_edaerwnnet
arma::mat predict_edaerwnnet(Rcpp::List network, arma::mat x);
RcppExport SEXP _rwnnet_predict_edaerwnnet(SEXP networkSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type network(networkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_edaerwnnet(network, x));
    return rcpp_result_gen;
END_RCPP
}
// fit_edrwnnet
Rcpp::List fit_edrwnnet(arma::mat x, arma::mat y, Rcpp::NumericVector size, double eta);
RcppExport SEXP _rwnnet_fit_edrwnnet(SEXP xSEXP, SEXP ySEXP, SEXP sizeSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_edrwnnet(x, y, size, eta));
    return rcpp_result_gen;
END_RCPP
}
// predict_edrwnnet
arma::mat predict_edrwnnet(Rcpp::List network, arma::mat x);
RcppExport SEXP _rwnnet_predict_edrwnnet(SEXP networkSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type network(networkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_edrwnnet(network, x));
    return rcpp_result_gen;
END_RCPP
}
// fit_r2rwnnet
Rcpp::List fit_r2rwnnet(arma::mat x, arma::mat y, Rcpp::NumericVector size, bool skip, double eta);
RcppExport SEXP _rwnnet_fit_r2rwnnet(SEXP xSEXP, SEXP ySEXP, SEXP sizeSEXP, SEXP skipSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_r2rwnnet(x, y, size, skip, eta));
    return rcpp_result_gen;
END_RCPP
}
// predict_r2rwnnet
arma::mat predict_r2rwnnet(Rcpp::List network, arma::mat x);
RcppExport SEXP _rwnnet_predict_r2rwnnet(SEXP networkSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type network(networkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_r2rwnnet(network, x));
    return rcpp_result_gen;
END_RCPP
}
// fit_saerwnnet
Rcpp::List fit_saerwnnet(arma::mat x, arma::mat y, Rcpp::NumericVector size, double eta);
RcppExport SEXP _rwnnet_fit_saerwnnet(SEXP xSEXP, SEXP ySEXP, SEXP sizeSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_saerwnnet(x, y, size, eta));
    return rcpp_result_gen;
END_RCPP
}
// predict_saerwnnet
arma::mat predict_saerwnnet(Rcpp::List network, arma::mat x);
RcppExport SEXP _rwnnet_predict_saerwnnet(SEXP networkSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type network(networkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_saerwnnet(network, x));
    return rcpp_result_gen;
END_RCPP
}
// fit_slrwnnet
Rcpp::List fit_slrwnnet(arma::mat x, arma::mat y, int size, bool skip, double eta);
RcppExport SEXP _rwnnet_fit_slrwnnet(SEXP xSEXP, SEXP ySEXP, SEXP sizeSEXP, SEXP skipSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_slrwnnet(x, y, size, skip, eta));
    return rcpp_result_gen;
END_RCPP
}
// predict_slrwnnet
arma::mat predict_slrwnnet(Rcpp::List network, arma::mat x);
RcppExport SEXP _rwnnet_predict_slrwnnet(SEXP networkSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type network(networkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_slrwnnet(network, x));
    return rcpp_result_gen;
END_RCPP
}
// tikhonov
Rcpp::List tikhonov(arma::mat x, arma::mat y);
RcppExport SEXP _rwnnet_tikhonov(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tikhonov(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rwnnet_fit_aerwnnet", (DL_FUNC) &_rwnnet_fit_aerwnnet, 6},
    {"_rwnnet_predict_aerwnnet", (DL_FUNC) &_rwnnet_predict_aerwnnet, 2},
    {"_rwnnet_fit_drwnnet", (DL_FUNC) &_rwnnet_fit_drwnnet, 4},
    {"_rwnnet_predict_drwnnet", (DL_FUNC) &_rwnnet_predict_drwnnet, 2},
    {"_rwnnet_fit_edaerwnnet", (DL_FUNC) &_rwnnet_fit_edaerwnnet, 5},
    {"_rwnnet_predict_edaerwnnet", (DL_FUNC) &_rwnnet_predict_edaerwnnet, 2},
    {"_rwnnet_fit_edrwnnet", (DL_FUNC) &_rwnnet_fit_edrwnnet, 4},
    {"_rwnnet_predict_edrwnnet", (DL_FUNC) &_rwnnet_predict_edrwnnet, 2},
    {"_rwnnet_fit_r2rwnnet", (DL_FUNC) &_rwnnet_fit_r2rwnnet, 5},
    {"_rwnnet_predict_r2rwnnet", (DL_FUNC) &_rwnnet_predict_r2rwnnet, 2},
    {"_rwnnet_fit_saerwnnet", (DL_FUNC) &_rwnnet_fit_saerwnnet, 4},
    {"_rwnnet_predict_saerwnnet", (DL_FUNC) &_rwnnet_predict_saerwnnet, 2},
    {"_rwnnet_fit_slrwnnet", (DL_FUNC) &_rwnnet_fit_slrwnnet, 5},
    {"_rwnnet_predict_slrwnnet", (DL_FUNC) &_rwnnet_predict_slrwnnet, 2},
    {"_rwnnet_tikhonov", (DL_FUNC) &_rwnnet_tikhonov, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rwnnet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
